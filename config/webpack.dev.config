let {resolve} = require('path');

let workingDir = resolve(__dirname, '..');
function resolvePath(toResolve){
  return resolve(workingDir, toResolve);
}

let HtmlWebpackPlugin = require('html-webpack-plugin');
let ExtractTextWebpackPlugin = require('extract-text-webpack-plugin');

let globalScss = new ExtractTextWebpackPlugin({
  filename: 'global.css'
});

let stylesScss = new ExtractTextWebpackPlugin({
  filename: 'styles.css'
});

module.exports = {
  entry: resolvePath('./src/index.js'),
  devServer: {
    port: 3440,
    contentBase: resolvePath('./public')
  },
  devtool: 'cheap-module-eval-source-map',
  module: {
    rules: [
      {
        test: /.(js|jsx)$/,
        loader: require.resolve('babel-loader'),
        options: {
          presets:[
            'react', 'es2015'
          ],
          plugins: [
            'transform-es2015-destructuring', 'transform-object-rest-spread'
          ],
          cacheDirectory: true
        }
      },
      {
        test: /.scss$/,
        include: [
          /bootstrap4/, /fontawesome/
        ],
        use: globalScss.extract('css-loader?sourceMap!sass-loader?sourceMap')
      },
      {
        test: /.scss$/,
        exclude: [
          /bootstrap4/, /fontawesome/
        ],
        use: stylesScss.extract({
          use: [
            {
              loader: 'css-loader',
              options: {
                modules: true,
                sourceMap: true,
                importLoaders: 2, // 0 => no loaders applied to @imported resources before this css loader(default); 1 => sass-loader; 2 => sass-loader & sass-resources-loader
                localIdentName: '[local]_[hash:base64:3]'
              }
            },
            {
              loader: 'sass-loader',
              options: {
                sourceMap: true
              }
            },
            {
              loader: 'sass-resources-loader',
              options: {
                resources: [
                  resolvePath('./src/styles/bootstrap4/_bootstrap_norender.scss')
                ]
              }
            }
          ]
        })
      },
      {
        test: /\.(eot|svg|ttf|woff|woff2)$/,
        loader: 'file-loader?useRelativePath'
      }
    ]
  },
  resolve: {
    alias: {
      'app/bootstrap4': resolvePath('./src/styles/bootstrap4'),
      'app/fonts': resolvePath('./src/styles/fonts'),
      'app/action-types': resolvePath('./src/action-types')
    }
  },
  output: {
    path: resolvePath('dist'),
    filename: 'bundle.js',
    publicPath: '/'
  },
  plugins: [
    new HtmlWebpackPlugin({ 
      template: resolvePath('template/index.html')
    }),
    globalScss,
    stylesScss,
  ]
}
